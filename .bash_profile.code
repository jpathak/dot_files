#!/bin/sh
# WARNING: WIP!!
#
# Function to search a codebase for a snippet
# of code, in a particular kind of file. Store
# the results in an array called coderesults,
# which is used by function or() to dereference
# and open results in an emacs window
#
csr=()
function f() {
    #
    # CSEARCHINDEX needs to be updated to the current dir
    #
    export CSEARCHINDEX=$PWD/.csearchindex
    csr=()
    extension=".*"
    if (( "$#" == 2 )) ; then
        extension=$2
    fi

    OLDIFS=$IFS
    #
    # using "script" preserves color formatting
    # which can be then piped into the csr array
    # Regular search runs on grep
    #
    echo "Searching files of type (regex): $extension"
    if [ ! -f $CSEARCHINDEX ]; then
        echo "Using regular search..."
        IFS=$'\n' csr=($(script -q /dev/null find . \
               -name "*.$extension" \
               -exec grep -rnie "$1" {} \; | nl))
    else
        echo "Using indexed search.."
        #
        # "Fast" search runs on csearch
        #
        IFS=$'\n' csr=($(script -q /dev/null csearch -f "$extension\$" -n "$1" | grep --color=always "$1" | nl))
    fi
    printf '%s\n' "${csr[@]}"
    #
    # If only one result, take me there already!
    #
    if [ ${#csr[@]} -eq 1 ]; then
        r 1
    fi
    IFS=$OLDIFS
}

#
# Reference the code results generated above in f()
#
function r() {
    openEditorAt `echo ${csr[$1 - 1]} | sed -E "s/"$'\E'"\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]//g" | perl -pe's/^.*[0-9]+\s+([^\s:]*):([0-9]+):.*$/\1 \2/'`
}

function openEditorAt() {
    if [[ $EDITOR =~ "emacs" ]]; then
        $EDITOR +$2 $1
    else
        $EDITOR $1:$2
    fi
}

#
# With all the stuff around bash and colors,
# this command is useful to find out what exactly being
# displayed on the terminal
#
alias show_hidden="tr -dc '[:print:]' | od -c"
